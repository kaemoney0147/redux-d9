{"ast":null,"code":"export const SEARCH_JOBS = 'SEARCH_JOBS'; // action creator/builder, this can have any number of parameters\n\nexport const getJobList = query => {\n  // this is the thunk action, always 2 parameters\n  return async (dispatch, getState) => {\n    console.log('Fetching the jobs from the API...');\n\n    try {\n      let baseEndpoint = \"https://strive-benchmark.herokuapp.com/api/jobs?search=\";\n      const response = await fetch(baseEndpoint + query + \"&limit=20\");\n\n      if (response.ok) {\n        let data = await response.json();\n        const fetchJobs = data.data; // {data}\n\n        dispatch({\n          type: SEARCH_JOBS,\n          payload: fetchJobs // the reducer is just being given\n          // the final result, the array of books! so it cannot fail :)\n\n        });\n      } else {\n        alert(\"Error fetching results\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};","map":{"version":3,"names":["SEARCH_JOBS","getJobList","query","dispatch","getState","console","log","baseEndpoint","response","fetch","ok","data","json","fetchJobs","type","payload","alert","error"],"sources":["/Users/kay/Desktop/redux-d9/src/redux/actions/index.js"],"sourcesContent":["\n\n\nexport const SEARCH_JOBS = 'SEARCH_JOBS'\n\n// action creator/builder, this can have any number of parameters\nexport const  getJobList= (query) => {\n  // this is the thunk action, always 2 parameters\n    return async (dispatch, getState) => {\n      console.log('Fetching the jobs from the API...')\n      try {\n        let baseEndpoint =  \"https://strive-benchmark.herokuapp.com/api/jobs?search=\"   \n            const response = await fetch(baseEndpoint+ query + \"&limit=20\")\n            if (response.ok) {\n              let data = await response.json();\n              const fetchJobs=data.data\n              // {data}\n\n              dispatch({\n                type: SEARCH_JOBS,\n                payload: fetchJobs, // the reducer is just being given\n                // the final result, the array of books! so it cannot fail :)\n              })\n            } else {\n              alert(\"Error fetching results\");\n            }\n            } catch (error) {\n            console.log(error);\n          }\n    }\n}"],"mappings":"AAGA,OAAO,MAAMA,WAAW,GAAG,aAApB,C,CAEP;;AACA,OAAO,MAAOC,UAAU,GAAGC,KAAD,IAAW;EACnC;EACE,OAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;IACnCC,OAAO,CAACC,GAAR,CAAY,mCAAZ;;IACA,IAAI;MACF,IAAIC,YAAY,GAAI,yDAApB;MACI,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,YAAY,GAAEL,KAAd,GAAsB,WAAvB,CAA5B;;MACA,IAAIM,QAAQ,CAACE,EAAb,EAAiB;QACf,IAAIC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAjB;QACA,MAAMC,SAAS,GAACF,IAAI,CAACA,IAArB,CAFe,CAGf;;QAEAR,QAAQ,CAAC;UACPW,IAAI,EAAEd,WADC;UAEPe,OAAO,EAAEF,SAFF,CAEa;UACpB;;QAHO,CAAD,CAAR;MAKD,CAVD,MAUO;QACLG,KAAK,CAAC,wBAAD,CAAL;MACD;IACA,CAhBP,CAgBQ,OAAOC,KAAP,EAAc;MAChBZ,OAAO,CAACC,GAAR,CAAYW,KAAZ;IACD;EACN,CArBD;AAsBH,CAxBM"},"metadata":{},"sourceType":"module"}